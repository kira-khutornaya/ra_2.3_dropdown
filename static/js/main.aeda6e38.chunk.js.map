{"version":3,"sources":["DropdownItem.js","data.js","DropdownList.js","Dropdown.js","App.js","reportWebVitals.js","index.js"],"names":["DropdownItem","item","name","link","useState","over","setOver","onMouseOver","onFocus","onMouseLeave","href","style","color","items","DropdownList","data-id","className","map","Dropdown","listStatus","setStatus","openedMark","type","onClick","status","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA4BeA,MAzBf,YAAiC,IAATC,EAAQ,EAARA,KACdC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KADgB,EAENC,oBAAS,GAFH,mBAEvBC,EAFuB,KAEjBC,EAFiB,KAO9B,OACE,oBACEC,YAAa,kBAAMD,GAAQ,IAC3BE,QAAS,kBAAMF,GAAQ,IACvBG,aAAc,kBAAMH,GAAQ,IAH9B,SAKE,mBAAGI,KAAMP,EAAMQ,MAAON,EAVX,CACbO,MAAO,WASiC,KAAtC,SAA6CV,OCIpCW,EApBD,CAAC,CACbX,KAAM,sBACNC,KAAM,KACL,CACDD,KAAM,kBACNC,KAAM,KACL,CACDD,KAAM,aACNC,KAAM,KAER,CACED,KAAM,OACNC,KAAM,KAGR,CACED,KAAM,UACNC,KAAM,MCEOW,MAff,WACE,OACE,oBAAIC,UAAQ,WAAWC,UAAU,WAAjC,SAEIH,EAAMI,KAAI,SAAChB,GAAD,OACR,cAAC,EAAD,CACEA,KAAMA,GACDA,EAAKC,YCaPgB,MArBf,WAAqB,IAAD,EACcd,oBAAS,GADvB,mBACXe,EADW,KACCC,EADD,KAEZC,EAAaF,EAAa,wBAA0B,mBAK1D,OACE,qBAAKH,UAAU,YAAf,SACE,sBAAKD,UAAQ,UAAUC,UAAWK,EAAlC,UACE,yBAAQN,UAAQ,SAASC,UAAU,MAAMM,KAAK,SAASC,QAP7C,WACdH,GAAU,SAACI,GAAD,OAAaA,MAMnB,UACE,oDACA,mBAAGR,UAAU,iBAAb,uBAGF,cAAC,EAAD,UCROS,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.aeda6e38.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DropdownItem({ item }) {\n  const { name, link } = item;\n  const [over, setOver] = useState(false);\n  const styles = {\n    color: '#507cfb',\n  };\n\n  return (\n    <li\n      onMouseOver={() => setOver(true)}\n      onFocus={() => setOver(true)}\n      onMouseLeave={() => setOver(false)}\n    >\n      <a href={link} style={over ? styles : null}>{name}</a>\n    </li>\n  );\n}\n\nDropdownItem.propTypes = {\n  item: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default DropdownItem;\n","const items = [{\n  name: 'Profile Information',\n  link: '#',\n}, {\n  name: 'Change Password',\n  link: '#',\n}, {\n  name: 'Become PRO',\n  link: '#',\n},\n{\n  name: 'Help',\n  link: '#',\n\n},\n{\n  name: 'Log Out',\n  link: '#',\n}];\n\nexport default items;\n","import React from 'react';\nimport DropdownItem from './DropdownItem';\nimport items from './data';\n\nfunction DropdownList() {\n  return (\n    <ul data-id=\"dropdown\" className=\"dropdown\">\n      {\n        items.map((item) => (\n          <DropdownItem\n            item={item}\n            key={item.name}\n          />\n        ))\n      }\n    </ul>\n  );\n}\n\nexport default DropdownList;\n","import React, { useState } from 'react';\nimport DropdownList from './DropdownList';\n\nfunction Dropdown() {\n  const [listStatus, setStatus] = useState(false);\n  const openedMark = listStatus ? 'dropdown-wrapper open' : 'dropdown-wrapper';\n  const onClick = () => {\n    setStatus((status) => !status);\n  };\n\n  return (\n    <div className=\"container\">\n      <div data-id=\"wrapper\" className={openedMark}>\n        <button data-id=\"toggle\" className=\"btn\" type=\"button\" onClick={onClick}>\n          <span>Account Settings</span>\n          <i className=\"material-icons\">public</i>\n        </button>\n\n        <DropdownList />\n      </div>\n    </div>\n  );\n}\n\nexport default Dropdown;\n","import React from 'react';\nimport './App.css';\nimport Dropdown from './Dropdown';\n\nfunction App() {\n  return (\n    <Dropdown />\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}